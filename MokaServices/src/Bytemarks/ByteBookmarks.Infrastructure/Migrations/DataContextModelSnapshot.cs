// <auto-generated />
using System;
using ByteBookmarks.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ByteBookmarks.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ByteBookmarks.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.CategoryBookmark", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookmarkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "BookmarkId");

                    b.HasIndex("BookmarkId");

                    b.ToTable("CategoryBookmarks");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookmarkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookmarkId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.TagBookmark", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookmarkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "BookmarkId");

                    b.HasIndex("BookmarkId");

                    b.ToTable("TagBookmarks");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("AvatarId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Bookmark", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.ApplicationUser", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Category", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.ApplicationUser", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.CategoryBookmark", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.Bookmark", "Bookmark")
                        .WithMany("CategoryBookmarks")
                        .HasForeignKey("BookmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByteBookmarks.Core.Entities.Category", "Category")
                        .WithMany("CategoryBookmarks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmark");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Image", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.Bookmark", "Bookmark")
                        .WithOne("Image")
                        .HasForeignKey("ByteBookmarks.Core.Entities.Image", "BookmarkId");

                    b.HasOne("ByteBookmarks.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Bookmark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Tag", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.ApplicationUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.TagBookmark", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.Bookmark", "Bookmark")
                        .WithMany("TagBookmarks")
                        .HasForeignKey("BookmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByteBookmarks.Core.Entities.Tag", "Tag")
                        .WithMany("TagBookmarks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmark");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("ByteBookmarks.Core.Entities.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("ByteBookmarks.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Profile")
                        .HasForeignKey("ByteBookmarks.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Categories");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Bookmark", b =>
                {
                    b.Navigation("CategoryBookmarks");

                    b.Navigation("Image");

                    b.Navigation("TagBookmarks");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Category", b =>
                {
                    b.Navigation("CategoryBookmarks");
                });

            modelBuilder.Entity("ByteBookmarks.Core.Entities.Tag", b =>
                {
                    b.Navigation("TagBookmarks");
                });
#pragma warning restore 612, 618
        }
    }
}
